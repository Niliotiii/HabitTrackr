@layout()
<div class="page-header">
  <h3 class="page-title"> Meta - {{ !goal ? 'Nova' : `Atualização: ${goal.frequencia}` }} </h3>
</div>

<div class="row">
  <div class="col-12 grid-margin stretch-card">
    <div class="card">
      <div class="card-body">
        <form class="forms-sample" method="POST" id="goalForm"
          action="{{ !goal ? route('goals.store') : route('goals.update', { id: goal.id }, { qs: { _method: 'PUT' } }) }}">

          {{ csrfField() }}

          <div class="form-row">
            <!-- Campo de Frequência -->
            <div class="form-group col-md-6">
              <label for="inputFrequencia">Frequência</label>
              <select class="form-control" id="inputFrequencia" name="frequencia">
                <option value="dia" {{ old('frequencia') == 'dia' || goal?.frequencia == 'dia' ? 'selected' : '' }}>Diário</option>
                <option value="semana" {{ old('frequencia') == 'semana' || goal?.frequencia == 'semana' ? 'selected' : '' }}>Semanal</option>
                <option value="mes" {{ old('frequencia') == 'mes' || goal?.frequencia == 'mes' ? 'selected' : '' }}>Mensal</option>
              </select>

              @inputError('frequencia')
              <span class="text-danger"> {{ $messages.join(', ') }} </span>
              @end
            </div>

            <!-- Campo de Quantidade (calculado automaticamente) -->
            <div class="form-group col-md-6">
              <label for="inputQuantity">Quantidade</label>
              <input class="form-control input-quantity" id="inputQuantity" name="quantity"
                value="{{ old('quantity') || goal?.quantity || '' }}" readonly
                placeholder="A quantidade será calculada automaticamente">

              @inputError('quantity')
              <span class="text-danger"> {{ $messages.join(', ') }} </span>
              @end
            </div>
          </div>

          <div class="form-row">
            <div class="form-group col-md-6">
              <label for="inputStartDate">Data de Início</label>
              <input type="date" class="form-control" id="inputStartDate" name="start_date"
                value="{{ old('start_date') || goal?.start_date?.toFormat('yyyy-MM-dd') || '' }}" required>

              @inputError('start_date')
              <span class="text-danger"> {{ $messages.join(', ') }} </span>
              @end
            </div>

            <div class="form-group col-md-6">
              <label for="inputEndDate">Data de Fim</label>
              <input type="date" class="form-control" id="inputEndDate" name="end_date"
                value="{{ old('end_date') || goal?.end_date?.toFormat('yyyy-MM-dd') || '' }}">

              @inputError('end_date')
              <span class="text-danger"> {{ $messages.join(', ') }} </span>
              @end
            </div>
          </div>

          <!-- Pontuação sempre definida como 0 -->
          <input type="hidden" id="inputScore" name="score" value="0">

          <div class="form-group">
            <label for="inputHabit">Hábito</label>
            <select class="form-control" id="inputHabit" name="habitId" required>
              <option value="">Selecione um hábito</option>
              @each(habit in habits)
              <option value="{{ habit.id }}" {{ old('habitId') == habit.id || goal?.habitId == habit.id ? 'selected' : '' }}>
                {{ habit.name }}
              </option>
              @end
            </select>

            @inputError('habitId')
            <span class="text-danger"> {{ $messages.join(', ') }} </span>
            @end
          </div>

          <button type="submit" class="btn btn-primary mr-2">Salvar</button>
          <a href="{{ route('goals.index') }}" class="btn btn-dark">Cancelar</a>
        </form>
      </div>
    </div>
  </div>
</div>
@end

<style>
  /* Estilo para o campo de quantidade em readonly com fundo escuro */
  .input-quantity[readonly] {
    background-color: #343a40; /* Fundo escuro */
    color: #f8f9fa; /* Texto claro */
    border: 1px solid #495057; /* Borda para combinar com o tema */
  }

  /* Ajuste para os outros campos, se necessário */
  .form-control {
    background-color: #343a40; /* Fundo escuro */
    color: #f8f9fa; /* Texto claro */
    border: 1px solid #495057; /* Borda padrão */
  }
</style>

<script>
  // Calcula a quantidade automaticamente com base na frequência e nas datas
  function calculateQuantity() {
    const frequencia = document.getElementById('inputFrequencia').value;
    const startDateValue = document.getElementById('inputStartDate').value;
    const endDateValue = document.getElementById('inputEndDate').value;

    // Verificar se as datas estão preenchidas e válidas
    if (!startDateValue || !endDateValue || new Date(endDateValue) < new Date(startDateValue)) {
      document.getElementById('inputQuantity').value = 0;
      return;
    }

    const startDate = new Date(startDateValue);
    const endDate = new Date(endDateValue);

    // Calcular a diferença corretamente usando UTC para evitar problemas de fuso horário
    const timeDiff = Math.abs(Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()) - 
                              Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()));
    const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1; // Adiciona 1 para incluir o último dia

    let quantity = 0;
    switch (frequencia) {
      case 'dia':
        quantity = daysDiff;
        break;
      case 'semana':
        quantity = Math.ceil(daysDiff / 7);
        break;
      case 'mes':
        quantity = Math.ceil(daysDiff / 30);
        break;
    }

    document.getElementById('inputQuantity').value = quantity;
  }

  // Listener para quando o usuário mudar as datas ou a frequência
  document.getElementById('inputFrequencia').addEventListener('change', calculateQuantity);
  document.getElementById('inputStartDate').addEventListener('change', calculateQuantity);
  document.getElementById('inputEndDate').addEventListener('change', calculateQuantity);

  document.getElementById('goalForm').addEventListener('submit', function(event) {
    const habitId = document.getElementById('inputHabit').value;
    const startDateValue = document.getElementById('inputStartDate').value;
    const endDateValue = document.getElementById('inputEndDate').value;

    // Verificar se a data de fim é anterior à data de início
    if (new Date(endDateValue) < new Date(startDateValue)) {
      alert('A data de fim deve ser posterior ou igual à data de início.');
      event.preventDefault();
      return;
    }

    if (!habitId) {
      alert('O campo Hábito é obrigatório.');
      event.preventDefault();
      return;
    }
  });

  // Iniciar o cálculo da quantidade ao carregar a página (caso existam dados)
  document.addEventListener('DOMContentLoaded', calculateQuantity);
</script>
